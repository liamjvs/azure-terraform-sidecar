---
name: $(Build.SourceBranchName) - $(Build.RequestedFor) - $(date:yyyyMMdd)$(rev:.r)

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md

parameters:
  - name: deploy
    default: true
    type: boolean
  - name: destroy
    default: true
    type: boolean

resources:
  repositories:
    - repository: PipelineTemplates
      type: git
      name: foundation/platformpipelines
      ref: "refs/tags/1.0.0"

variables:
  - name: ServiceConnection
    value: AZU-LMP-DEVOPS-SIDECAR-SPN
    readonly: true
  - name: SubscriptionID
    value: bc7dbec3-f309-4281-b232-8a2172a83544
    readonly: true
  - name: workingDirectory
    value: .tests/deployTest

stages:
  - template: scan/pipeline-stage.yaml@PipelineTemplates
    parameters:
      genTfDocs: true
      FailOnFindings: false
      workingDirectory: ${{ variables['Build.Repository.LocalPath'] }}
      repoType: solution
  - stage: DeployChecks
    displayName: Deployment validation
    dependsOn: [ ]
    jobs:
      - job: validation
        steps:
          - template: terraform/steps/init.yaml@PipelineTemplates
            parameters:
              ServiceConnection: ${{ variables.ServiceConnection }}
              TargetSubscriptionID: ${{ variables.SubscriptionID }}
              workingDirectory: ${{ variables.workingDirectory }}
          - template: terraform/steps/plan.yaml@PipelineTemplates
            parameters:
              ServiceConnection: ${{ variables.ServiceConnection }}
              TargetSubscriptionID: ${{ variables.SubscriptionID }}
              workingDirectory: ${{ variables.workingDirectory }}
          - ${{ if eq(parameters.deploy, true) }}:
              - template: terraform/steps/apply.yaml@PipelineTemplates
                parameters:
                  ServiceConnection: ${{ variables.ServiceConnection }}
                  TargetSubscriptionID: ${{ variables.SubscriptionID }}
                  workingDirectory: ${{ variables.workingDirectory }}
                  resolveoutput: true
              - task: AzurePowerShell@5
                displayName: "Run post-deployment tests"
                inputs:
                  azureSubscription: ${{ variables.ServiceConnection }}
                  azurePowerShellVersion: "latestVersion"
                  preferredAzurePowerShellVersion: ""
                  ScriptType: InlineScript
                  pwsh: true
                  inline: |
                    Invoke-Pester -Configuration @{
                      Run        = @{
                        Container = New-PesterContainer -Path (Join-Path '$(System.DefaultWorkingDirectory)' '.tests' 'deployTest' 'Test-Workload.ps1') -Data @{
                          ResourceGroupName = '$(tf_apply.sidecar_resource_group_name)'
                          StorageAccountName = '$(tf_apply.sidecar_storage_account_name)'
                          PrivateDnsZoneName = '$(tf_apply.sidecar_private_dns_zone_name)'
                          NetworkSecurityGroupName = '$(tf_apply.sidecar_network_security_group_name)'
                          VirtualNetworkName = '$(tf_apply.sidecar_virtual_network_name)'
                          VirtualNetworkId = '$(tf_apply.sidecar_virtual_network_id)'
                          VirtualMachineScaleSetName = '$(tf_apply.sidecar_virtual_machine_scaleset_name)'
                          NatGatewayName = '$(tf_apply.sidecar_nat_gateway_name)'
                          PublicIpPrefixName = '$(tf_apply.sidecar_public_ip_prefix_name)'
                        }
                      }
                      TestResult = @{
                        TestSuiteName = 'Module Tests'
                        OutputPath    = 'testResults.xml'
                        OutputFormat  = 'NUnitXml'
                        Enabled       = $true
                      }
                      Output     = @{
                        Verbosity = 'Detailed'
                      }
                    } -ErrorAction 'Stop'
                  errorActionPreference: continue
              - task: PublishTestResults@2
                displayName: Publish Test Results
                inputs:
                  testRunTitle: "Post deployment tests"
                  testResultsFormat: NUnit
                  testResultsFiles: testResults.xml
                  failTaskOnFailedTests: true
                continueOnError: false
                condition: succeededOrFailed()
          - ${{ if eq(parameters.destroy, true) }}:
              - template: terraform/steps/destroy.yaml@PipelineTemplates
                parameters:
                  ServiceConnection: ${{ variables.ServiceConnection }}
                  TargetSubscriptionID: ${{ variables.SubscriptionID }}
                  workingDirectory: ${{ variables.workingDirectory }}
  - stage: Release
    displayName: Process tag
    dependsOn:
      - Scan
      - DeployChecks
    jobs:
      - job:
        displayName: Process Release Tag
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        steps:
          - checkout: self
            path: ${{ variables['Build.DefinitionName'] }}
            persistCredentials: true
          - checkout: PipelineTemplates
            path: platformpipelines
          - template: releasetag/steps/setReleaseTag.yml@PipelineTemplates
            parameters:
              sourceRepoUri: ${{ variables.Build.Repository.Uri }}
